# Super MapScraper Caddy Configuration
# Production-ready configuration with security headers and HTTP/3 support

# Global options
{
    # Enable HTTP/3 (QUIC)
    servers {
        protocol {
            experimental_http3
        }
    }
    
    # Enable automatic HTTPS
    auto_https off
}

# Main domain configuration
:80 {
    # Redirect HTTP to HTTPS
    redir https://{host}{uri} permanent
}

:443 {
    # Security headers
    header {
        # HSTS - Force HTTPS
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        
        # Prevent MIME type sniffing
        X-Content-Type-Options "nosniff"
        
        # Prevent clickjacking
        X-Frame-Options "DENY"
        
        # Referrer policy
        Referrer-Policy "strict-origin-when-cross-origin"
        
        # Content Security Policy
        Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://maps.googleapis.com; style-src 'self' 'unsafe-inline' https://unpkg.com; img-src 'self' data: https: https://cdnjs.cloudflare.com; connect-src 'self' https://maps.googleapis.com; font-src 'self' data:; object-src 'none'; base-uri 'self'; form-action 'self';"
        
        # Permissions Policy
        Permissions-Policy "geolocation=(), microphone=(), camera=()"
        
        # Remove server information
        -Server
        
        # Cache control for static assets
        Cache-Control "public, max-age=31536000" {
            path *.js *.css *.png *.jpg *.jpeg *.gif *.ico *.svg *.woff *.woff2
        }
        
        # Cache control for HTML
        Cache-Control "no-cache, no-store, must-revalidate" {
            path *.html
        }
    }
    
    # Enable compression
    encode gzip
    
    # Rate limiting
    rate_limit {
        zone static {
            key {remote_host}
            events 100
            window 1m
        }
    }
    
    # Serve static files from frontend
    root * /srv/www
    file_server
    
    # Proxy API requests to backend
    reverse_proxy /api/* {
        to localhost:8080
        
        # Health check
        health_uri /health
        health_interval 30s
        health_timeout 5s
        
        # Load balancing (if multiple instances)
        # lb_policy round_robin
        
        # Headers for backend
        header_up Host {host}
        header_up X-Real-IP {remote_host}
        header_up X-Forwarded-For {remote_host}
        header_up X-Forwarded-Proto {scheme}
    }
    
    # Handle SPA routing - serve index.html for non-API routes
    try_files {path} /index.html
    
    # Logging
    log {
        output file /var/log/caddy/access.log {
            roll_size 100mb
            roll_keep 5
            roll_keep_for 720h
        }
        format json
        level INFO
    }
    
    # Error handling
    handle_errors {
        @404 {
            expression {http.error.status_code} == 404
        }
        rewrite @404 /index.html
        file_server
    }
}

# Health check endpoint (internal)
:8081 {
    respond /health "OK" 200
}